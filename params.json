{"name":"Robospock","tagline":"","body":"RoboSpock makes life a bit easier. Developer just needs to extend RoboSpecification. That's it! You can test now your Android apps with Spock.\r\n\r\n--\r\nHere we will show some simple examples how to program in RoboSpock.\r\nThe test below is basic test in Robolectric.\r\n\r\n    @Test\r\n    public void testHelloText() {\r\n        // given\r\n        final TextView textView = new TextView(Robolectric.application);\r\n\r\n        // when\r\n        textView.setText(\"Hello\")\r\n\r\n        // then\r\n        Assert.assertEquals(\"Hello\", textView.getText());\r\n    }\r\n\r\nWe use given/when/then as comments to mark which parts of tests are responsible for preparation, action and assertion. Assertion is done via Assert.assertEquals.\r\n\r\nConverting the same to RoboSpock will look like this:\r\n\r\n    def \"should display hello text\"() {\r\n        given:\r\n        def textView = new TextView(Robolectric.application)\r\n\r\n        when:\r\n        textView.setText(\"Hello\")\r\n\r\n        then:\r\n        textView.text == \"Hello\"\r\n    }\r\n    \r\nFirst of all we can use human readable sentences for method naming. Second of all using dynamic typing. Third of all no ';'. These things we get from Groovy. Spock introduced keywords for 'given', 'when', 'then' (and few more) so from this time we point which part of code is really preparation or assertion. For example 'then' part has to have asserion, otherwise Spock will close with warning text. There is Android integration done by Robolectric. 'textView' exists so we can check its content by calling 'field' text not method getText() - Groovy automagically transform .text to getText(). Assertion is done by simple logic expression not by unit static method.\r\n\r\nDoes it look great?!\r\n\r\nInstallation\r\n========\r\n\r\nWe advice to install RoboSpock using gradle by adding the line to dependencies\r\n\r\n    compile 'pl.polidea:robospock:0.1'\r\n    \r\nand remember to use groovy plugin\r\n\r\n    apply plugin: 'groovy'\r\n    \r\nIf you prefer maven for building test application please add this text to your pom.xml\r\n\r\n    <dependency>\r\n        <groupId>pl.polidea</groupId>\r\n        <artifactId>robospock</artifactId>\r\n        <version>0.1</version>\r\n    </dependency>\r\n\r\n\r\nThe installation can be also done just by downloading <a href=\"http://search.maven.org/remotecontent?filepath=pl/polidea/robospock/0.1/robospock-0.1.jar\">jar</a>. Remember to get the dependencies:\r\n<ul>\r\n<li><a href=\"http://search.maven.org/remotecontent?filepath=org/spockframework/spock-core/0.6-groovy-1.8/spock-core-0.6-groovy-1.8.jar\">Spock</a></li>\r\n<li><a href=\"http://search.maven.org/remotecontent?filepath=com/pivotallabs/robolectric/1.1/robolectric-1.1-jar-with-dependencies.jar\">Robolectric with denedencies</a></li>\r\n<li><a href=\"http://search.maven.org/remotecontent?filepath=org/roboguice/roboguice/2.0/roboguice-2.0.jar\">RoboGuice</a></li>\r\n<li><a href=\"http://code.google.com/p/google-guice/downloads/detail?name=guice-2.0-no_aop.jar\">Guice 2.0 no aop</a><br>For RoboGuice installation please check <a href=\"http://code.google.com/p/roboguice/wiki/Installation\"> this link</a></li>\r\n</ul>\r\n\r\nFor maven and jar projects please configure your test project in your IDE as Groovy based project (not only Java).\r\nYou may find sources and Javadocs in <a href=\"http://search.maven.org/#browse%7C285983449\">Central Maven Repository</a> as well.\r\n","google":"UA-45012184-1","note":"Don't delete this file! It's used internally to help with page regeneration."}